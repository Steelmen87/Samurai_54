{"version":3,"sources":["components/Users/users.module.css","components/Profile/MyPosts/MyPosts.module.css","assets/images/user.png","assets/images/Hourglass.gif","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","serviceWorker.tsx","redux/dialogs-reduser.tsx","redux/friends-reduser.tsx","api/api.ts","redux/profile-reduser.tsx","redux/users-reduser.tsx","redux/auth-reduser.tsx","redux/app-reduser.tsx","redux/redux-store.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Users/Users.tsx","components/common/preloader/Preloader.tsx","redux/UserSelectors.ts","components/Users/UsersContainer.tsx","components/Profile/MyPosts/ProfileInfo/ProfileStatus.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Login/Login.tsx","redux/auth-Selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/common/FormsControls/FormsControls.module.css"],"names":["module","exports","userPhoto","selectedPage","postsBlock","posts","__webpack_require__","p","item","img","descriptionBlock","Boolean","window","location","hostname","match","initialState","dialogs","id","name","messages","message","dialogsReducer","state","arguments","length","undefined","action","type","newMessage","newMessageText","Object","objectSpread2","concat","toConsumableArray","friendsReducer","instance","axios","create","withCredentials","baseURL","headers","API-KEY","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","profileAPI","getProfile","getStatus","res","updateStatus","status","put","authAPI","email","password","rememberMe","likesCount","profile","setStatus","profileReducer","newPost","newPostText","filter","users","totalUsersCount","isFetching","followingInProgress","setFilter","setCurrentPageAC","setIsFetchingAC","toggleFollowingProgress","usersReducer","map","u","followed","count","login","isAuth","captchaUrl","setAuthUserData","payload","getAuthUserData","dispatch","resultCode","_data$data","authReducer","initialized","appReducer","rootReducer","combineReducers","dialogPage","friendPage","profilePage","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","News","props","react_default","a","createElement","className","s","Y","Music","Settings","DialogItem","path","dialog","src","alt","react_router_dom","to","Message","Textarea","_ref","input","meta","objectWithoutProperties","hasError","touched","error","styles","form_control","assign","Input","_ref2","required","value","maxLengthCreator","maxLength","DialogsFormRedux","reduxForm","onSubmit","handleSubmit","Field","component","validate","Dialogs","dialogsElement","d","Dialogs_DialogItem_DialogItem","messageElement","m","Dialogs_Message_Message","dialogsItems","values","onSendMessageClick","mapStateToPropsForRedirect","compose","connect","addAnswerActionCreator","Component","RedirectComponent","_React$Component","inherits","_super","createSuper","classCallCheck","this","apply","createClass","key","react_router","React","Users","useDispatch","pagesCount","Math","ceil","pages","i","push","_useState","useState","_useState2","slicedToArray","search","setSearch","_useState3","_useState4","placeholder","onChange","e","target","onClick","onPageChanged","indexOf","photos","small","disabled","some","unfollow","follow","Preloader","Hourglass","getUsers","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","_this","Fragment","Preloader_Preloader","components_Users_Users","followACSuccess","unfollowACSuccess","items","totalCount","ProfileStatus","editMode","activateEditMode","setState","onStatusChange","currentTarget","prevProps","prevState","onDoubleClick","autoFocus","onBlur","deactivateEditMode","bind","ProfileInfo","large","ProfileInfo_ProfileStatus","Post","length10","AddMyPostFormRedux","MyPosts","postsElement","MyPosts_Post_Post","addPost","MyPostsContainer","addPostActionCreator","Profile","MyPosts_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","params","authorizedUserId","history","getUsersProFile","components_Profile_Profile","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","stop","_x","_callee2","_context2","_x2","_ref3","_callee3","_context3","t0","_x3","withRouter","LoginReduxForm","style","formSummaryError","stopSubmit","_error","formData","selectAuth","selectCurrentUserLogin","AppHeader","useSelector","Header","Layout","row","col","span","menu","theme","mode","defaultSelectedKeys","Item","avatar","backgroundColor","icon","UserOutlined","es_button","App","InitializeApp","SubMenu","Menu","Content","Footer","Sider","layout","Header_AppHeader","padding","breadcrumb","margin","width","defaultOpenKeys","height","title","LaptopOutlined","NotificationOutlined","minHeight","render","DialogsContainer","Profile_ProfileContainer","components_News_News","components_Music_Music","components_Settings_Settings","Users_UsersContainer","components_Login_Login","textAlign","ReactDOM","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","active","b","inputMar"],"mappings":"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","file":"static/js/main.4c1788ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__KM6GG\",\"selectedPage\":\"users_selectedPage__2GbF9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1baQ6\",\"posts\":\"MyPosts_posts__2UtUL\"};","module.exports = __webpack_public_path__ + \"static/media/user.8b1dbb1f.png\";","module.exports = __webpack_public_path__ + \"static/media/Hourglass.6921c9f6.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProfileInfo_item__2v_-X\",\"img\":\"ProfileInfo_img__33tXm\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3VQvM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__PoR4d\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andery\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Victor\"},\r\n        {id: 6, name: \"Valera\"},\r\n        {id: 7, name: \"Kos\"}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is you\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n    ] as Array<MessageType>,\r\n\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state = initialState, action: AddMessageActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            let newMessage: MessageType = {\r\n                id: 6,\r\n                message: action.newMessageText\r\n            };\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage]\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AddMessageActionType = {\r\n    type: 'ADD-MESSAGE'\r\n    newMessageText: string\r\n}\r\nexport const addAnswerActionCreator = (newMessageText: string): AddMessageActionType =>\r\n    ({type: ADD_MESSAGE, newMessageText} as const)\r\n\r\nexport default dialogsReducer","type FriendsDialogsType =\r\n    {\r\n        id: number,\r\n        name: string\r\n    }\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andery\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Victor\"},\r\n        {id: 6, name: \"Valera\"},\r\n        {id: 7, name: \"Kos\"}\r\n    ] as Array<FriendsDialogsType>\r\n}\r\ntype initialStateType = typeof initialState\r\nconst friendsReducer = (state = initialState, action): initialStateType => {\r\n    return {...state}\r\n}\r\nexport default friendsReducer;","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"745f2516-5f87-4b00-acd9-4642814a1bb5\"\r\n\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    /*getAuth() {\r\n        return instance.get(`auth/me`)\r\n            .then(data => data.data);\r\n    },*/\r\n    getProfile(userId: number) {\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n            .then(data => data.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId)\r\n            .then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status})\r\n            .then(res => res.data);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n            .then(data => data.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\n","import {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\n\r\nexport type AddPostActionType = {\r\n    type:'ADD-POST',\r\n    newPostText:string\r\n}\r\nexport type UpDateNewPostActionType = {\r\n    type:'UPDATE-NEW-POST-TEXT'\r\n    newText:string\r\n}\r\nexport type AddMessageActionType = {\r\n    type:'ADD-MESSAGE'\r\n    newMessageText:string\r\n}\r\nexport type UpDateMessageActionType = {\r\n    type:'UPDATE-MESSAGE-TEXT'\r\n    newTextMessage:string\r\n}\r\nexport type ActionsTypes = AddPostActionType|UpDateNewPostActionType|AddMessageActionType|UpDateMessageActionType\r\nexport type TYPESALLACTION = ActionsTypes| SetUserProfileActionType| setStatusType\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n}\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi how are you?\", likesCount: 5},\r\n        {id: 2, message: \"It is my First post!\", likesCount: 23},\r\n        {id: 3, message: \"BlaBla\", likesCount: 65},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n\r\n};\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state: InitialStateType = initialState,action: TYPESALLACTION): InitialStateType =>\r\n{\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionType => ({type: ADD_POST, newPostText})\r\n\r\ntype SetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => ({type: SET_USER_PROFILE, profile})\r\nexport type setStatusType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\nexport const setStatus = (status: string): setStatusType =>\r\n    ({type: SET_STATUS, status: status})\r\n\r\nexport const getUsersProFile = (userId: number) => async (dispatch: any) => {\r\n    const response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response));\r\n}\r\nexport const getStatus = (userId: number) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n\r\n    dispatch(setStatus(response));\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    try {\r\n        let response = await profileAPI.updateStatus(status);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n            debugger\r\n        }\r\n    } catch (error) {\r\n        //\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst FOLLOW = 'FOLLOW-POST';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_FILTER = 'SET_FILTER';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    name: string,\r\n    status: string,\r\n    photos: { small: string, large: string },\r\n    followed: boolean\r\n}\r\n\r\nlet initialState = {\r\n    filter: '',\r\n    users: [] as Array<UserType>,\r\n    pageSize: 40,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n\r\n}\r\n\r\nexport type InitialState = typeof initialState\r\n\r\nconst usersReducer = (state: InitialState = initialState, action: ActionType): InitialState => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true};\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false};\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_FILTER: {\r\n            return {...state, filter: action.filter}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n\r\n            return {\r\n                ...state,\r\n                //@ts-ignore\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType =\r\n    followACSuccessType\r\n    | unfollowACSuccessType\r\n    | setUsersACType\r\n    | setCurrentPageACType\r\n    | setUsersTotalCountACType\r\n    | setIsFetchingACType\r\n    | toggleFollowingProgressType\r\n    | setFilterType\r\n\r\nexport const setFilter = (filter: string) => ({type: SET_FILTER, filter} as const)\r\ntype setFilterType = ReturnType<typeof setFilter>\r\n\r\nexport const followACSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\ntype followACSuccessType = ReturnType<typeof followACSuccess>\r\n\r\nexport const unfollowACSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\ntype unfollowACSuccessType = ReturnType<typeof unfollowACSuccess>\r\n\r\nexport const setUsersAC = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\ntype setUsersACType = ReturnType<typeof setUsersAC>\r\n\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\ntype setCurrentPageACType = ReturnType<typeof setCurrentPageAC>\r\n\r\nexport const setUsersTotalCountAC = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n} as const)\r\ntype setUsersTotalCountACType = ReturnType<typeof setUsersTotalCountAC>\r\n\r\nexport const setIsFetchingAC = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\ntype setIsFetchingACType = ReturnType<typeof setIsFetchingAC>\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n} as const)\r\ntype toggleFollowingProgressType = ReturnType<typeof toggleFollowingProgress>\r\n//-----------------------------------------------------------\r\n/*\r\ntype DispatchType = Dispatch<ActionType>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionType>\r\n*/\r\n//_________________________________________________________________\r\n\r\n\r\n//_________________________________________________________________\r\nexport const getUsersThunkCreator = (currentPage, pageSize) => {\r\n    return (dispatch) => {\r\n        dispatch(setIsFetchingAC(true));\r\n        dispatch(setCurrentPageAC(currentPage))\r\n        usersAPI.getUsers(currentPage, pageSize)\r\n            .then(data => {\r\n                dispatch(setIsFetchingAC(false));\r\n                dispatch(setUsersAC(data.items));\r\n                dispatch(setUsersTotalCountAC(data.totalCount));\r\n                dispatch(setCurrentPageAC(currentPage))\r\n            })\r\n    };\r\n}\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.follow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followACSuccess(userId));\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId));\r\n            });\r\n    };\r\n}\r\nexport const unfollow = (userId) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.unfollow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowACSuccess(userId));\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId));\r\n            });\r\n    };\r\n}\r\n\r\n\r\nexport default usersReducer;","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from 'redux-form';\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    id: null as string | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl:null as string | null\r\n\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst authReducer = (state= initialState, action: setAuthUserDataType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\nexport type setAuthUserDataType = ReturnType<typeof setAuthUserData>\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {id, login, email, isAuth}\r\n} as const)\r\nexport type getAuthUserData = ReturnType<typeof getAuthUserData>\r\nexport const getAuthUserData = () => {\r\n    return (dispatch:Dispatch) => {\r\n        return authAPI.me()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let {id, login, email} = data.data;\r\n                    dispatch(setAuthUserData(id, email, login, true));\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const login = (email, password, rememberMe) => (dispatch) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData())\r\n            } else {\r\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n                dispatch(stopSubmit(\"login\", {_error: message}));\r\n            }\r\n        })\r\n};\r\nexport const logout = () => (dispatch: Dispatch) => {\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n        })\r\n};\r\n\r\nexport default authReducer;","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {setAuthUserData, getAuthUserData} from \"./auth-reduser\";\r\n\r\nconst SET_INITIALIZED_SUCCESS = 'SET_INITIALIZED_SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: initializedType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\nexport type initializedType = ReturnType<typeof InitializedSuccess>\r\n\r\nexport const InitializedSuccess = () => ({\r\n    type: SET_INITIALIZED_SUCCESS\r\n} as const)\r\n\r\nexport const InitializeApp = () => (dispatch:any) => {\r\n    let promise  = dispatch(getAuthUserData())\r\n    promise.then(() => {\r\n        dispatch(InitializedSuccess())\r\n    })\r\n\r\n}\r\n\r\nexport default appReducer;","import {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport dialogsReducer from \"./dialogs-reduser\";\r\nimport friendsReducer from \"./friends-reduser\";\r\nimport profileReducer from \"./profile-reduser\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reduser\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reduser\";\r\n\r\nlet rootReducer = combineReducers({\r\n    dialogPage: dialogsReducer,\r\n    friendPage: friendsReducer,\r\n    profilePage: profileReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app:appReducer\r\n})\r\n\r\nexport type ActionsTypes = {\r\n\r\n}\r\ntype PropertiesType<T> = T extends {[key:string]:infer U} ? U : never\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;","import React from \"react\";\r\nimport s from './News.module.css'\r\nconst News = (props) => {\r\n    return(\r\n        <div className={s.Y}>\r\n            News\r\n        </div>\r\n    )\r\n}\r\nexport default News;","import React from \"react\";\r\nimport s from './Music.module.css'\r\nconst Music = (props) => {\r\n    return(\r\n        <div className={s.Y}>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music;","import React from \"react\";\r\nimport s from './Settings.module.css'\r\nconst Settings = (props) => {\r\n    return(\r\n        <div className={s.Y}>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype DialogItemType = {\r\n    id:Number\r\n    name:string\r\n}\r\nconst DialogItem:React.FC<DialogItemType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src='https://main-cdn.goods.ru/hlr-system/1722315217/600001112185b0.jpeg' alt=\"\"/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsMessageType = {\r\n    message:string\r\n}\r\nconst Message:React.FC<PropsMessageType> = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\nexport default Message;\r\n","import React from \"react\";\r\nimport styles from './FormsControls.module.css'\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (<div className={styles.form_control + ' ' + (hasError ? styles.error : \"\")}>\r\n        <div><textarea {...input} {...props}/></div>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>)\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (<div className={styles.form_control + ' ' + (hasError ? styles.error : \"\")}>\r\n        <div><input {...input} {...props}/></div>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>)\r\n}\r\n","import React from 'react'\r\n\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\nexport const maxLengthCreator = (maxLength) => value => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {DialogType, initialStateType, MessageType} from \"../../redux/dialogs-reduser\";\r\n\r\ntype DialogProps = {\r\n    onSendMessageClick: (newMessageText: string) => void\r\n    dialogPage: {\r\n        dialogs: Array<DialogType>\r\n        messages: Array<MessageType>\r\n    }\r\n}\r\n\r\n\r\nconst Dialogs: React.FC<DialogProps> = (props) => {\r\n    let state = props.dialogPage\r\n\r\n    let dialogsElement = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\r\n\r\n    let messageElement = state.messages.map(m => <Message message={m.message}/>);\r\n\r\n    let onSendMessageClick = (values) => {\r\n        props.onSendMessageClick(values.newMessageText);\r\n\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElement}\r\n            </div>\r\n            <DialogsFormRedux onSubmit={onSendMessageClick}/>\r\n        </div>\r\n    )\r\n}\r\nconst length = maxLengthCreator(12)\r\nconst DialogsForm = (props) => {\r\n    return (<form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                name=\"newMessageText\"\r\n                component={Textarea}\r\n                validate={[required, length]}/>\r\n            <button>add message</button>\r\n        </form>\r\n    )\r\n}\r\nconst DialogsFormRedux = reduxForm({form: \"DialogMessageTextForm\"})(DialogsForm);\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","\r\nimport {addAnswerActionCreator, DialogType} from \"../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch,} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n        newMessageText: state.dialogPage.newMessageText\r\n    }\r\n}\r\n//export type mapStateToProps = typeof mapStateToProps\r\nexport type mapDispatchToProps = ReturnType<typeof mapDispatchToProps>\r\n\r\nlet mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        onSendMessageClick: (newMessageText:string) => {\r\n            dispatch(addAnswerActionCreator(newMessageText))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import React, {useMemo, useState} from 'react'\r\nimport styles from \"./users.module.css\"\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {setFilter, UserType} from \"../../redux/users-reduser\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (p: number) => void\r\n    users: Array<UserType>\r\n    unfollow: (id: number) => void\r\n    followingInProgress: Array<number>\r\n    follow: (id: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n}\r\n\r\nlet Users: React.FC<PropsType> = (props) => {\r\n    let dispatch = useDispatch()\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages: number[] = [];\r\n    for (let i: number = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    const [search, setSearch] = useState('')\r\n    const [filterTimeoutID, setfilterTimeoutID] = useState('')\r\n\r\n    const onSearchChange = (e) => {\r\n        setSearch(e.target.value)\r\n        dispatch(setFilter(search))\r\n    }\r\n\r\n\r\n    return <div>\r\n        <input placeholder={\"search\"} value={search} onChange={onSearchChange}/>\r\n        <div><strong>Total Users Count: {props.totalUsersCount}</strong></div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p ? styles.selectedPage : \"\"}\r\n                             onClick={() => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p}*</span>\r\n            })}\r\n        </div>\r\n        {\r\n            props.users\r\n                .filter(u=>u.name.indexOf(search)>-1)\r\n                .map(u => <div key={u.id}>\r\n                <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + u.id}>\r\n                <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}\r\n                     alt=\"\"/>\r\n                     </NavLink>\r\n            </div>\r\n            <div>\r\n        {u.followed\r\n            ? <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n\r\n                props.unfollow(u.id)\r\n\r\n\r\n            }}>Unfollow</button>\r\n            : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n\r\n                props.follow(u.id)\r\n\r\n\r\n            }}>Follow</button>}\r\n            </div>\r\n            </span>\r\n                <span>\r\n            <span>\r\n            <div>{u.name}</div>\r\n            <div>{u.status}</div>\r\n            </span>\r\n            <span>\r\n            <div>{\"u.location.country\"}</div>\r\n            <div>{\"u.location.city\"}</div>\r\n\r\n            </span>\r\n            </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\nexport default Users;","import React from 'react'\r\nimport Hourglass from \"../../../assets/images/Hourglass.gif\";\r\n\r\nexport let Preloader = (props) => {\r\n    return <div>\r\n        <img src={Hourglass} alt=\"\"/>\r\n    </div>\r\n}","import {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n        return users.filter(u => true)\r\n    }\r\n)\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress\r\n}","import {connect, useSelector} from \"react-redux\";\r\nimport {\r\n    getUsersThunkCreator,\r\n    follow, unfollow, toggleFollowingProgress, setFilter\r\n} from \"../../redux/users-reduser\";\r\nimport React, {useEffect} from \"react\";\r\nimport Users from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getPageSize,\r\n    getUsers,\r\n    getTotalUsersCount,\r\n    getCurrentPage,\r\n    getIsFetching,\r\n    getFollowingInProgress\r\n} from \"../../redux/UserSelectors\";\r\n\r\ntype UserType = {\r\n    id: number,\r\n    name: string,\r\n    status: string,\r\n    photos: { small: string, large: string },\r\n    followed: boolean,\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\ntype PropsType = {\r\n    setFilter: (filter: string) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingProgress: (isFetching: boolean) => void\r\n    users: Array<UserType>\r\n    setCurrentPage: (p: number) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void\r\n    setUsers: (res: string) => void\r\n    unfollow: (id: number) => void\r\n    follow: (id: number) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: []\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n\r\n\r\n}\r\n/*export type UsersPropsType = UserType & PropsType*/\r\n\r\n// @ts-ignore\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    state = {\r\n        search: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ?\r\n                <Preloader/> : null}\r\n            <Users\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                unfollow={this.props.unfollow}\r\n                follow={this.props.follow}\r\n                currentPage={this.props.currentPage}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                followingInProgress={this.props.followingInProgress}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n/*\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n*/\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        filter: state.usersPage.filter,\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setFilter,\r\n        follow,\r\n        unfollow,\r\n        toggleFollowingProgress: toggleFollowingProgress,\r\n        getUsers: getUsersThunkCreator\r\n        // @ts-ignore\r\n    }))(UsersContainer);\r\n","import React, {ChangeEvent} from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\ntype StateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\nclass ProfileStatus extends React.Component<PropsType, StateType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    }\r\n\r\n    deactivateEditMode() {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: StateType) {\r\n\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>\r\n                        {this.props.status || \"-------\"}\r\n                    </span>\r\n                </div>\r\n                }\r\n                {this.state.editMode &&\r\n                <div>\r\n                    <input onChange={this.onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={this.deactivateEditMode.bind(this)}\r\n                           value={this.state.status}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;\r\n//TODO Form for status\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../../common/preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            {/*<div>\r\n                <img className={s.img}\r\n                     src='https://mobimg.b-cdn.net/pic/v2/gallery/preview/more-pejzazh-pesok-plyazh-volny-22777.jpg'\r\n                     alt=''/>\r\n            </div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large} alt=''/>\r\n\r\n                <ProfileStatus status={props.status}\r\n                               updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://main-cdn.goods.ru/hlr-system/1722315217/600001112185b0.jpeg' alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like </span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Post;","import React, {RefObject} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm, InjectedFormProps} from 'redux-form'\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElement = props.posts.map(p => <Post likesCount={p.likesCount} message={p.message}/>);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n            </div>\r\n\r\n            <AddMyPostFormRedux onSubmit={onAddPost}/>\r\n\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst length10 = maxLengthCreator(10)\r\nconst AddMyPostForm = (props) => {\r\n    return (<form onSubmit={props.handleSubmit}>\r\n        <Field name=\"newPostText\" component={Textarea} validate={[required,length10]} placeholder={\"Post Message\"}/>\r\n        {/*<textarea\r\n            value={props.newPostText}\r\n            onChange={onPostChange}\r\n            ref={newPostElement}\r\n        />*/}\r\n        <div>{/**/}\r\n            <button>Add Post</button>\r\n            {/*<button onClick={onAddPost}>Add Post</button>*/}\r\n        </div>\r\n    </form>)\r\n}\r\n\r\nconst AddMyPostFormRedux = reduxForm({form: 'ProfileAddNewPostForm'})(AddMyPostForm)\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostActionCreator } from \"../../../redux/profile-reduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps,)(MyPosts);\r\nexport type PostType = typeof MyPostsContainer;\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={ props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUsersProFile, updateStatus} from \"../../redux/profile-reduser\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {compose} from \"redux\";\r\n\r\ntype pathParamsType = {\r\n    userId: string\r\n}\r\ntype mapStateToPropsType = {\r\n    profile: any\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId:string\r\n\r\n}\r\ntype mapDispatchPropsType = {\r\n    getUsersProFile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype OwnPropsType = mapStateToPropsType & mapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<pathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUsersProFile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport type ProfileType = {\r\n    profile: {\r\n        aboutMe: string\r\n        contacts: {\r\n            facebook: string\r\n            website: null | string\r\n            vk: string\r\n            twitter: string\r\n            instagram: string\r\n            youtube: null | string\r\n            github: string\r\n            mainLink: null | string\r\n        },\r\n        lookingForAJob: boolean\r\n        lookingForAJobDescription: string\r\n        fullName: string\r\n        userId: number\r\n        photos: {\r\n            small: string\r\n            large: string\r\n        }\r\n    },\r\n    status: string,\r\n    authorizedUserId:string,\r\n    isAuth:boolean\r\n\r\n}\r\n\r\nlet mapStateToProps = (state): ProfileType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId:state.auth.id,\r\n    isAuth:state.auth.isAuth,\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUsersProFile, getStatus, updateStatus}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)\r\n","import React from \"react\";\r\nimport {Field, reduxForm, InjectedFormProps} from 'redux-form'\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reduser\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from './../common/FormsControls/FormsControls.module.css'\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype PropsType = mapStateToPropsType &mapDispatchToPropsType\r\n\r\nconst Login:React.FC<PropsType> = (props) => {\r\n    let onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.login, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nconst length = maxLengthCreator(20)\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    const {handleSubmit} = props;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field name=\"login\" component={Input} validate={[required, length]} placeholder={\"Login\"}/></div>\r\n            <div><Field name=\"password\" component={Input} validate={[required, length]} type={\"password\"}\r\n                        placeholder={\"Password\"}/></div>\r\n            <div><Field name=\"rememberMe\" component={Input} type={\"checkbox\"}/>remember me</div>\r\n            {props.error && <div className={style.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <button>Login</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\ntype mapStateToPropsType = {\r\n    isAuth:boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    login:(email:string,\r\n    password:string,\r\n    rememberMe:boolean)=>void\r\n}\r\nconst mapStateToProps = (state:AppStateType):mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const selectAuth = (state:AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const selectCurrentUserLogin = (state:AppStateType) => {\r\n    return state.auth.login\r\n}\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {selectAuth, selectCurrentUserLogin} from \"../../redux/auth-Selectors\";\r\nimport {logout} from \"../../redux/auth-reduser\";\r\n\r\nexport type MapPropsType = {}\r\n\r\n\r\nexport const AppHeader: React.FC<MapPropsType> = (props) => {\r\n    const isAuth = useSelector<AppStateType>(selectAuth)\r\n    const login = useSelector<AppStateType>(selectCurrentUserLogin)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const {Header} = Layout;\r\n    return (<Header className=\"header\">\r\n        <div className=\"logo\"/>\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\r\n                </Menu></Col>\r\n            {isAuth\r\n                ? <><Col span={1}>\r\n                    <Avatar alt={login && ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                </Col>\r\n                    <Col span={5}>\r\n                        <Button onClick={logoutCallback}>Log Out</Button>\r\n                    </Col>\r\n                </>\r\n                : <Col span={6}>\r\n                    <Button>\r\n                        <Link to={'/login'}>Login</Link>\r\n                    </Button>\r\n                </Col>}\r\n\r\n        </Row>\r\n    </Header>)\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Link, Route} from 'react-router-dom'\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {InitializeApp, InitialStateType} from \"./redux/app-reduser\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport 'antd/dist/antd.css'\r\n\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {Breadcrumb, Layout, Menu} from \"antd\";\r\nimport {AppHeader} from \"./components/Header/Header\";\r\n\r\nclass App extends React.Component<any, any> {\r\n    componentDidMount() {\r\n        this.props.InitializeApp()\r\n    }\r\n\r\n    render() {\r\n        /*if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }*/\r\n        const {SubMenu} = Menu;\r\n        const {Header, Content, Footer, Sider} = Layout;\r\n        return (\r\n            <Layout>\r\n                <AppHeader />\r\n                <Content style={{padding: '0 50px'}}>\r\n                    <Breadcrumb style={{margin: '16px 0'}}>\r\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                defaultSelectedKeys={['1']}\r\n                                defaultOpenKeys={['sub1']}\r\n                                style={{height: '100%'}}\r\n                            >\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\r\n                                    <Menu.Item key=\"1\"><Link to=\"/profile\">Profile</Link> </Menu.Item>\r\n                                    <Menu.Item key=\"2\"> <Link to=\"/dialogs\">Messages</Link></Menu.Item>\r\n                                    <Menu.Item key=\"3\">option3</Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\r\n                                    <Menu.Item key=\"5\"><Link to=\"/developers\">Users</Link></Menu.Item>\r\n                                    <Menu.Item key=\"6\">option6</Menu.Item>\r\n                                    <Menu.Item key=\"7\">option7</Menu.Item>\r\n                                    <Menu.Item key=\"8\">option8</Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"subnav 3\">\r\n                                    <Menu.Item key=\"9\">option9</Menu.Item>\r\n                                    <Menu.Item key=\"10\">option10</Menu.Item>\r\n                                    <Menu.Item key=\"11\">option11</Menu.Item>\r\n                                    <Menu.Item key=\"12\">option12</Menu.Item>\r\n                                </SubMenu>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\r\n                            <Route path=\"/dialogs/\" render={() => <DialogsContainer/>}/>\r\n                            <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                            <Route path=\"/news/\" render={() => <News/>}/>\r\n                            <Route path=\"/music/\" render={() => <Music/>}/>\r\n                            <Route path=\"/settings/\" render={() => <Settings/>}/>\r\n                            <Route path=\"/developers/\" render={() => <UsersContainer/>}/>\r\n                            <Route path=\"/login/\" render={() => <LoginPage/>}/>\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}>©2021 Created by Petrov Konstantin</Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: InitialStateType) => ({\r\n    initialized: state.initialized\r\n})\r\n\r\nexport default compose(connect(mapStateToProps, {InitializeApp}))(App);\r\n\r\n\r\n/*(\r\n\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path=\"/dialogs/\" render={() => <DialogsContainer/>}/>\r\n                    <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                    <Route path=\"/news/\" render={() => <News/>}/>\r\n                    <Route path=\"/music/\" render={() => <Music/>}/>\r\n                    <Route path=\"/settings/\" render={() => <Settings/>}/>\r\n                    <Route path=\"/users/\" render={() => <UsersContainer/>}/>\r\n                    <Route path=\"/login/\" render={() => <LoginPage/>}/>\r\n\r\n                </div>\r\n            </div>\r\n        );*/\r\n","import React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/redux-store'\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__bwqRF\",\"dialogsItems\":\"Dialogs_dialogsItems__3tJzp\",\"active\":\"Dialogs_active__mAJMV\",\"messages\":\"Dialogs_messages__2QN-2\",\"message\":\"Dialogs_message__3z8Qw\",\"b\":\"Dialogs_b__3oND_\",\"inputMar\":\"Dialogs_inputMar__1YWqp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_control\":\"FormsControls_form_control__aVD1E\",\"error\":\"FormsControls_error__39z6d\",\"formSummaryError\":\"FormsControls_formSummaryError__1KNvN\"};"],"sourceRoot":""}